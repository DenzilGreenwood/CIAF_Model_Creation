# Pre-commit Configuration for CIAF
# Install with: pre-commit install

repos:
  # Code Formatting
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        args: [--line-length=100]
        language_version: python3
        
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=100]
        
  # Code Quality & Linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=100, --ignore=E203,W503]
        additional_dependencies: [
          flake8-docstrings,
          flake8-bugbear,
          flake8-comprehensions,
          flake8-simplify
        ]
        
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.3.0
    hooks:
      - id: mypy
        args: [--ignore-missing-imports, --strict-optional]
        additional_dependencies: [types-requests, types-redis]
        
  # Security Scanning
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, ciaf/, -f, json, -o, bandit-report.json]
        pass_filenames: false
        
  # General Code Quality
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]
        
  # Python Import Sorting
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.7.0
    hooks:
      - id: pyupgrade
        args: [--py310-plus]
        
  # Documentation
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        
  # Jupyter Notebooks
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.7.0
    hooks:
      - id: nbqa-black
        args: [--line-length=100]
      - id: nbqa-isort
        args: [--profile=black]
      - id: nbqa-flake8
        args: [--max-line-length=100, --ignore=E203,W503,E402]
        
  - repo: https://github.com/kynan/nbstripout
    rev: 0.6.1
    hooks:
      - id: nbstripout
        
  # YAML/JSON Formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.0
    hooks:
      - id: prettier
        types_or: [yaml, json, markdown]
        exclude: ^(docs/|examples/.*\.md$)
        
  # LaTeX (for documentation)
  - repo: https://github.com/jonasbb/pre-commit-latex-hooks
    rev: v1.3.0
    hooks:
      - id: latex-clean
        args: [--exclude, "*.pdf"]
        
  # CIAF Specific Hooks
  - repo: local
    hooks:
      - id: ciaf-compliance-check
        name: CIAF Compliance Validation
        entry: python scripts/validate_frameworks.py
        language: system
        pass_filenames: false
        stages: [commit]
        
      - id: ciaf-regulatory-mapping-check
        name: CIAF Regulatory Mapping Validation
        entry: python scripts/validate_regulatory_mappings.py
        language: system
        pass_filenames: false
        stages: [commit]
        
      - id: ciaf-citation-validation
        name: CIAF Citation Anchor Validation
        entry: python -c "
import sys, os
sys.path.insert(0, os.getcwd())
try:
    from examples.citation_anchor_demo import demonstrate_citation_anchor
    print('✅ Citation anchor system validation passed')
except Exception as e:
    print(f'❌ Citation anchor validation failed: {e}')
    sys.exit(1)
"
        language: system
        pass_filenames: false
        stages: [push]
        
      - id: ciaf-crypto-health-check
        name: CIAF Cryptographic Health Check
        entry: python -c "
import sys, os
sys.path.insert(0, os.getcwd())
try:
    from ciaf.crypto_health import crypto_health_check
    result = crypto_health_check()
    if result['overall_health']:
        print('✅ Cryptographic health check passed')
    else:
        print('❌ Cryptographic health check failed')
        sys.exit(1)
except ImportError:
    print('⚠️  Crypto health check module not available')
except Exception as e:
    print(f'❌ Crypto health check failed: {e}')
    sys.exit(1)
"
        language: system
        pass_filenames: false
        stages: [commit]
        
  # Dependency Security
  - repo: https://github.com/lucas-c/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        args: [--ignore=51668]  # Ignore specific known false positives
        
  # Git Conventional Commits
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v2.3.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        
# CI Configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks
    
    for more information, see https://pre-commit.ci
    
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [
    python-safety-dependencies-check,
    ciaf-compliance-check,
    ciaf-regulatory-mapping-check,
    ciaf-citation-validation,
    ciaf-crypto-health-check
  ]
  submodules: false